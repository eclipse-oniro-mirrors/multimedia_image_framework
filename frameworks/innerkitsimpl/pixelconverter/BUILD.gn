# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/image_framework/ide/image_decode_config.gni")

config("pixelconvertadapter_public_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "//foundation/multimedia/image_framework/interfaces/innerkits/include",
    "//foundation/multimedia/image_framework/frameworks/innerkitsimpl/pixelconverter/include",
    "${image_subsystem}/frameworks/innerkitsimpl/utils/include",
  ]

  if (use_mingw_win) {
    include_dirs += [
      "//foundation/multimedia/image_framework/mock/native/include",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
      "//foundation/communication/ipc/utils/include",
      "$third_party_skia_root/include/core",
      "$third_party_skia_root/include/encode",
      "$third_party_skia_root",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/src/ports",
      "$third_party_skia_root/src/images",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/third_party/externals/freetype/include/freetype",
      "//third_party/bounds_checking_function/include",
    ]
  } else if (use_clang_mac) {
    include_dirs += [
      "//foundation/multimedia/image_framework/mock/native/include",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
      "$third_party_skia_root/include/core",
      "$third_party_skia_root/include/encode",
      "$third_party_skia_root",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/src/ports",
      "$third_party_skia_root/src/images",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/third_party/externals/freetype/include/freetype",
      "//third_party/bounds_checking_function/include",
    ]
  } else if (use_clang_ios) {
    include_dirs += [
      "//commonlibrary/c_utils/base/include",
      "//foundation/communication/ipc/utils/include",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
      "$third_party_skia_root/include/core",
      "$third_party_skia_root/include/encode",
      "$third_party_skia_root",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/src/ports",
      "$third_party_skia_root/src/images",
      "$third_party_skia_root/include/private",
      "$third_party_skia_root/third_party/externals/freetype/include/freetype",
      "//third_party/bounds_checking_function/include",
      "$image_subsystem/mock/native/include/log",
    ]
  } else if (use_clang_android) {
    include_dirs += [
      "//commonlibrary/c_utils/base/include",
      "//foundation/communication/ipc/utils/include",
      "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
      "$third_party_skia_root/include/encode",
      "$third_party_skia_root",
      "$third_party_skia_root/src/ports/skia_ohos",
      "$third_party_skia_root/src/ports",
      "$third_party_skia_root/src/images",
      "$third_party_skia_root/include/private",
      "$third_party_skia_root/third_party/externals/freetype/include/freetype",
      "//third_party/bounds_checking_function/include",
      "$image_subsystem/mock/native/include/log",
    ]
  }
}

if (use_clang_ios) {
  ohos_source_set("pixelconvertadapter") {
    sources = [ "//foundation/multimedia/image_framework/frameworks/innerkitsimpl/pixelconverter/src/pixel_convert_adapter.cpp" ]

    public_configs = [ ":pixelconvertadapter_public_config" ]

    defines = image_decode_ios_defines
    deps = [
      "../utils:image_utils",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]
    deps += skia_platform

    #relative_install_dir = "module/multimedia"
    subsystem_name = "multimedia"
    part_name = "image_framework"
  }
} else {
  ohos_shared_library("pixelconvertadapter") {
    if (!use_clang_android) {
      branch_protector_ret = "pac_ret"
      sanitize = {
        cfi = true
        cfi_cross_dso = true
        cfi_vcall_icall_only = true
        debug = false
      }
    }
    sources = [ "//foundation/multimedia/image_framework/frameworks/innerkitsimpl/pixelconverter/src/pixel_convert_adapter.cpp" ]

    public_configs = [ ":pixelconvertadapter_public_config" ]

    if (use_mingw_win) {
      defines = image_decode_windows_defines
      deps = [
        "../utils:image_utils",
        "//foundation/multimedia/image_framework/mock/native:log_mock_static",
      ]
      deps += skia_platform
    } else if (use_clang_mac) {
      defines = image_decode_mac_defines
      deps = [
        "../utils:image_utils",
        "//foundation/multimedia/image_framework/mock/native:log_mock_static",
      ]
      deps += skia_platform
    } else if (use_clang_android) {
      deps = [
        "../utils:image_utils",
        "//foundation/graphic/graphic_2d/utils/color_manager:color_manager",
        "//foundation/multimedia/image_framework/mock/native:log_mock_static",
      ]

      libs = [ "nativewindow" ]
    } else {
      deps = [
        "../utils:image_utils",
        "//foundation/multimedia/image_framework/mock/native:log_mock_static",
      ]
      external_deps = [
        "c_utils:utils",
        "ffmpeg:libohosffmpeg",
        "graphic_2d:color_manager",
        "hilog:libhilog",
        "skia:skia_canvaskit",
      ]
    }

    #relative_install_dir = "module/multimedia"
    subsystem_name = "multimedia"
    innerapi_tags = [ "platformsdk" ]
    part_name = "image_framework"
  }
}

if (use_mingw_win || use_clang_mac || use_clang_ios || use_clang_android) {
ohos_static_library("pixelconvertadapter_static") {
  sources = [ "//foundation/multimedia/image_framework/frameworks/innerkitsimpl/pixelconverter/src/pixel_convert_adapter.cpp" ]
  public_configs = [ ":pixelconvertadapter_public_config" ]

  if (!is_arkui_x) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      cfi_vcall_icall_only = true
      debug = false
    }
  }

  if (is_arkui_x) {
    include_dirs = [ "//third_party/ffmpeg" ]
  }

  if (use_mingw_win) {
    defines = image_decode_windows_defines
    deps = [
      "../utils:image_utils",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]
    deps += skia_platform
  } else if (use_clang_mac) {
    defines = image_decode_mac_defines
    deps = [
      "../utils:image_utils",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]
    deps += skia_platform
  } else if (use_clang_ios) {
    defines = image_decode_ios_defines
    deps = [
      "../utils:image_utils_static",
      "//foundation/graphic/graphic_2d/utils/color_manager:color_manager",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]
    deps += skia_platform
  } else if (use_clang_android) {
    deps = [
      "../utils:image_utils_static",
      "//foundation/graphic/graphic_2d/utils/color_manager:color_manager",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]
    deps += skia_platform

    libs = [ "nativewindow" ]
  } else {
    deps = [
      "../utils:image_utils",
      "//foundation/multimedia/image_framework/mock/native:log_mock_static",
    ]

    external_deps = [
      "c_utils:utils",
      "graphic_2d:color_manager",
      "hilog:libhilog",
      "skia:skia_canvaskit",
    ]
  }
  subsystem_name = "multimedia"
  part_name = "image_framework"
}
}
